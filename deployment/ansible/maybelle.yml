---
- name: Provision Jenkins for Cryptograss
  hosts: all

  vars:
    jenkins_port: 8080
    docker_users:
      - jenkins
    node_version: "23.6.1"
    ssl_cert_path: "/etc/nginx/ssl/cert.pem"
    ssl_key_path: "/etc/nginx/ssl/key.pem"
    domain_name: "maybelle.cryptograss.live"
    github_repo_url: "https://github.com/cryptograss/justinholmes.com" # TODO: make this dynamic?  Certainly it will change with the repo rename.
    secrets_dir: "{{ playbook_dir }}/../../secrets"
    jenkins_home: "/var/jenkins_home"
    secrets_max_level: 1  # Copy secrets from level 0 to this number
    required_secrets:
      env_file: "0/.env"
      tls_cert: "1/ssl/maybelle.cryptograss.live/cert.pem"
      tls_privkey: "1/ssl/maybelle.cryptograss.live/privkey.pem"
      jenkins_admin_password: "2/jenkins_admin_password"
      github_token: "2/github_token"

  tasks:
    - name: Check for required secret files
      stat:
        path: "{{ secrets_dir | realpath }}/{{ item.value }}"
      register: secret_stats
      loop: "{{ required_secrets | dict2items }}"
      delegate_to: localhost
      run_once: true
      failed_when: not secret_stats.stat.exists

    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - docker.io
          - nginx
        state: present
        update_cache: yes

    - name: Create SSL directory
      file:
        path: /etc/nginx/ssl
        state: directory
        mode: '0750'

    - name: Copy SSL certificate
      copy:
        src: "{{ secrets_dir }}/{{ required_secrets.tls_cert }}"
        dest: "{{ ssl_cert_path }}"
        mode: '0644'

    - name: Copy SSL key
      copy:
        src: "{{ secrets_dir }}/{{ required_secrets.tls_privkey }}"
        dest: "{{ ssl_key_path }}"
        mode: '0600'

    - name: Create Jenkins home directory
      file:
        path: "{{ jenkins_home }}"
        state: directory
        mode: '0755'
        owner: 1000  # jenkins user in container
        group: 1000  # jenkins group in container

    - name: Copy environment file
      copy:
        src: "{{ secrets_dir }}/{{ required_secrets.env_file }}"
        dest: "{{ jenkins_home }}/.env"
        mode: '0600'
        owner: 1000
        group: 1000

    - name: Create Jenkins Docker build directory
      file:
        path: "{{ jenkins_home }}/docker-build"
        state: directory
        mode: '0755'

    - name: Copy Dockerfile and build context
      copy:
        src: "{{ playbook_dir }}/../jenkins-docker/"
        dest: "{{ jenkins_home }}/docker-build/"
        mode: '0644'

    - name: Create blank .bashrc
      file:
        path: "{{ jenkins_home }}/.bashrc"
        state: touch
        mode: '0644'
        owner: 1000
        group: 1000

    - name: Build Jenkins Docker image
      docker_image:
        name: cryptograss-jenkins
        build:
          path: "{{ jenkins_home }}/docker-build"
          pull: yes
        source: build
        force_source: yes

    - name: Create Jenkins Casc Configs directory
      file:
        path: "{{ jenkins_home }}/casc_configs"
        state: directory
        mode: '0755'
        owner: 1000
        group: 1000

    - name: Create Jenkins Docker network
      docker_network:
        name: jenkins-network
        state: present

    - name: Copy Jenkins configuration file
      copy:
        src: "{{ playbook_dir }}/../configs/jenkins.yml"
        dest: "{{ jenkins_home }}/casc_configs/jenkins.yml"
        mode: '0644'
        owner: 1000
        group: 1000

    - name: Create secrets directory in Jenkins home
      file:
        path: "{{ jenkins_home }}/secrets"
        state: directory
        mode: '0700'
        owner: 1000
        group: 1000

    - name: Copy secrets by level
      copy:
        src: "{{ secrets_dir }}/{{ item }}/"
        dest: "{{ jenkins_home }}/secrets/{{ item }}/"
        mode: '0600'
        owner: 1000
        group: 1000
        directory_mode: '0700'
      loop: "{{ range(secrets_max_level + 1)|list }}"
      when: item <= secrets_max_level

    - name: Start Jenkins container
      docker_container:
        name: jenkins
        image: cryptograss-jenkins:latest
        restart_policy: unless-stopped
        volumes:
          - "{{ jenkins_home }}:/var/jenkins_home"
          - /var/run/docker.sock:/var/run/docker.sock
        env_file: "{{ jenkins_home }}/.env"
        env:
          CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs/jenkins.yml"
          JENKINS_ADMIN_ID: admin
          JENKINS_ADMIN_PASSWORD: "{{ lookup('file', '{{ secrets_dir }}/{{ required_secrets.jenkins_admin_password }}') }}"
          GITHUB_TOKEN: "{{ lookup('file', '{{ secrets_dir }}/{{ required_secrets.github_token }}') }}"
          GITHUB_REPO_URL: "{{ github_repo_url }}"
        ports:
          - "8080:8080"
        networks:
          - name: jenkins-network

    - name: Configure Nginx reverse proxy
      template:
        src: "{{ playbook_dir }}/conf-templates/nginx.conf.j2"
        dest: /etc/nginx/sites-available/jenkins
      notify: Restart Nginx

    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/jenkins
        dest: /etc/nginx/sites-enabled/jenkins
        state: link
      notify: Restart Nginx

    - name: Remove default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: Restart Nginx

    - name: Generate SSH key for root
      openssh_keypair:
        path: "~/.ssh/id_ed25519"
        type: ed25519
        state: present

    - name: Ensure that known_hosts is present
      ansible.builtin.file:
        path: "~/.ssh/known_hosts"
        state: touch

    - name: Add known_hosts entry for nearlyfreespeech.net
      ansible.builtin.known_hosts:
        host: ssh.nyc1.nearlyfreespeech.net
        hash_host: yes
        key: "|1|kXmD+AGFcaF62DEuUeuL+47t/BA=|Ri2jtfePwmmkcsa9BerY+xC+Epw= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICbXE1f5S3N/flFHUm2i97tzKGJUWzxotY1HHBMIX72h"
        state: present

    - name: Add known_hosts entry for NFS
      ansible.builtin.known_hosts:
        host: gith.nyc1.nearlyfreespeech.net
        hash_host: yes
        key: "|1|kXmD+AGFcaF62DEuUeuL+47t/BA=|Ri2jtfePwmmkcsa9BerY+xC+Epw= ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAICbXE1f5S3N/flFHUm2i97tzKGJUWzxotY1HHBMIX72h"
        state: present
    - name: Add known_hosts entry for github.com
      ansible.builtin.shell:
        cmd: "ssh-keyscan -H github.com >> /var/jenkins_home/.ssh/known_hosts"

    - name: Cronjob to rsync production builds to web servers
      ansible.builtin.cron:
        name: "push sites to prod"
        job: "rsync -vah --progress --delete /var/jenkins_home/www/builds/production/* jmyles_justinholmescom@ssh.nyc1.nearlyfreespeech.net: >> ~/sites-rsync.log 2>&1"

    - name: Create Jenkins job definitions directory
      file:
        path: "{{ jenkins_home }}/casc_configs/jobs"
        state: directory
        mode: '0755'
        owner: 1000
        group: 1000

    - name: Copy Jenkins job definitions
      copy:
        src: "{{ playbook_dir }}/../jobs/"
        dest: "{{ jenkins_home }}/jobs/"
        mode: '0644'
        owner: 1000
        group: 1000

    - name: Create PR builds directory
      file:
        path: "/var/www/builds"
        state: directory
        mode: '0755'
        owner: www-data
        group: www-data

    - name: Slurp public SSH key  # TODO: This is only useful as the jenkins user, which doesn't have a key yet.  Better to custody the private key and copy it.  #230
      ansible.builtin.slurp:
        src: ~/.ssh/id_ed25519.pub
      register: ssh_trinket

    - name: Print SSH trinket
      ansible.builtin.debug:
        msg: "{{ ssh_trinket['content'] | b64decode }}"

  handlers:
    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

